require './algo'
require 'spec_helper'

describe Pathfinder, "solve" do
  let(:solution) { pathfinder.solve }

  context "Test 1" do
    let(:pathfinder) do
      Pathfinder.new(
        4,5,
        [
          [ 0 , 0  , 0  , 0  , 0  ],
          [ 0 , -1 , -1 , 0  , -1 ],
          [ 0 , 0  , 0  , -1 , 0  ],
          [ 0 , -1 , 0  , 0  , 0  ],
        ],
        0,0,
        3,4
      )
    end

    it "should return the right output" do
      expect(solution).to eq(7)
    end
  end

  context "Test 2" do

    let(:pathfinder) do
      Pathfinder.new(
        4,5,
        [
          [ 0 , 0  , 0  , 0  , 0  ],
          [ 0 , -1 , -1 , 0  , 0  ],
          [ 0 , 0  , 0  , -1 , 0  ],
          [ 0 , 0  , 0  , 0  , 0  ],
        ],
        0,0,
        3,4
      )
    end

    it "should return the right output" do
      expect(solution).to eq(7)
    end
  end

  context "Test 3" do
    let(:pathfinder) do
      Pathfinder.new(
        10,10,
        [
          [ 0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  , 0  , 0 ],
          [ 0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  , 0  , 0 ],
          [ 0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  , 0  , 0 ],
          [ 0 , -1 , -1 , -1 , -1  ,  0 , -1 , 0  , 0  , 0 ],
          [ 0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , -1 , 0  , 0 ],
          [ 0 , -1 , -1 ,  0 , -1  , -1 , -1 , -1 , 0  , 0 ],
          [ 0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 , 0  , 0 ],
          [ 0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , -1 , 0  , 0 ],
          [ 0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  , 0  , 0 ],
          [ 0 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 , 0  , 0 ],
        ],
        4,4,
        9,9
      )
    end

    it "should return the right output" do
      expect(solution).to eq(18)
    end
  end

  context "Test 4" do
    let(:pathfinder) do
      Pathfinder.new(
        20,10,
        [
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 ,  0 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 , -1 ,  -1 ],
          [  0 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [ -1 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [ -1 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
        ],
        0,0,
        19,9
      )
    end

    it "should return the right output" do
      expect(solution).to eq(30)
    end
  end

  context "Test 5" do
    let(:pathfinder) do
      Pathfinder.new(
        60,10,
        [
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 ,  0 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 , -1 ,  -1 ],
          [  0 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [ -1 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [ -1 , -1 , -1 , -1 , -1 ,  -1 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 ,  0 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 , -1 ,  -1 ],
          [  0 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [ -1 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [ -1 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [ -1 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 ,  0 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 , -1 ,  -1 ],
          [  0 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [ -1 ,  0  , 0 , -1 ,  0  ,  0 , -1 , 0  ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 ,  0 , -1 ,  0  ,  0 ],
          [  0 , -1 , -1 , -1 , -1  , -1 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 , -1 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
          [  0 ,  0  , 0 ,  0 ,  0  ,  0 ,  0 , 0  ,  0  ,  0 ],
          [ -1 , -1 , -1 ,  0 ,  0  ,  0 , -1 , -1 ,  0  ,  0 ],
        ],
        0,0,
        59,9
      )
    end

    it "should return the right output" do
      expect(solution).to eq(96)
    end
  end
end
